
package {generator.packageName}.{target.relativePackage};

import {generator.packageName}.{entity.relativePackage}.{table.namePascal}{entity.postfix};
import {generator.packageName}.{repository.relativePackage}.{table.namePascal}{repository.postfix};

import io.quarkus.hibernate.reactive.panache.common.runtime.ReactiveTransactional;
import io.quarkus.panache.common.Sort;
import io.smallrye.mutiny.Uni;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

import static javax.ws.rs.core.Response.Status.NOT_FOUND;
import static javax.ws.rs.core.Response.Status.NO_CONTENT;

@Path("api/v1/entity/{table.name}")
@ApplicationScoped
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class {table.namePascal}Resource {

    @Inject
    {table.namePascal}{repository.postfix} repository;

    @GET
    public Uni<List<{table.namePascal}>> get() {
        return repository.listAll();
    }

    @GET
    @Path("{{id}}")
    public Uni<{table.namePascal}> getSingle(Long id) {
        return repository.findById(id);
    }

    @POST
    @ReactiveTransactional
    public Uni<Response> create({table.namePascal} entity) {
        if (entity.id != null) {
            throw new WebApplicationException("Id was invalidly set on request.", 422);
        }

        return repository.persist(entity)
            .replaceWith(Response.ok(entity).status(201).build());
    }

    @PUT
    @Path("{{id}}")
    @ReactiveTransactional
    public Uni<{table.namePascal}> update(Long id, {table.namePascal} entity) {
        if (entity.name == null) {
            throw new WebApplicationException("{table.namePascal} Name was not set on request.", 422);
        }

        return repository.findById(id)
            .onItem().ifNotNull().invoke(item -> {
                // update properties
            })
            .onItem().ifNull().failWith(new WebApplicationException("{table.namePascal} with id of " + id + " does not exist.", 404));
    }

    @DELETE
    @Path("{{id}}")
    @ReactiveTransactional
    public Uni<Response> delete(Long id) {
        return repository.deleteById(id)
            .map(deleted -> Response.ok().status(deleted ? NO_CONTENT : NOT_FOUND).build());
    }
}